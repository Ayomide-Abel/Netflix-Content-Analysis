legend.position = "none"  # Remove legend for a cleaner look
)
# Count of content per country
top_countries <- netflix_data %>%
filter(!is.na(country)) %>%
separate_rows(country, sep = ", ") %>%
group_by(country) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count)) %>%
head(10)
# Plot
ggplot(top_countries, aes(x = reorder(country, Content_Count), y = Content_Count, fill = country)) +
geom_bar(stat = "identity", show.legend = FALSE) +
coord_flip() +
labs(
title = "Top 10 Countries by Content Production",
subtitle = "The United States dominates in content production, followed by India and the United Kingdom",
x = "Country",
y = "Content Count"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "italic", hjust = 0.5, margin = margin(t = 10, b = 20)),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
plot.margin = margin(20, 20, 40, 20)
) +
guides(fill = guide_legend(title = NULL))
# Expand 'listed_in' column into multiple rows
categories <- netflix_data %>%
select(listed_in) %>%
separate_rows(listed_in, sep = ", ") %>%
group_by(listed_in) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
ggplot(categories[1:10, ], aes(x = reorder(listed_in, Count), y = Count, fill = listed_in)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Content Categories",
caption = "\"The International Movies\" and \"Dramas\" are the most prominent categories,\nreflecting a global and diverse audience.",
x = "Category",
y = "Count"
) +
scale_fill_brewer(palette = "RdBu") + # Use a diverging palette
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 20)),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
legend.position = "right", # Move legend to the right side of the plot
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
plot.margin = margin(20, 20, 30, 20) # Adjust margins for better spacing
)
# Expand 'listed_in' column into multiple rows
categories <- netflix_data %>%
select(listed_in) %>%
separate_rows(listed_in, sep = ", ") %>%
group_by(listed_in) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
ggplot(categories[1:10, ], aes(x = reorder(listed_in, Count), y = Count, fill = listed_in)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Content Categories",
caption = "\"The International Movies\" and \"Dramas\" are the most prominent categories,\nreflecting a global and diverse audience.",
x = "Category",
y = "Count"
) +
scale_fill_brewer(palette = "RdBu") + # Use a diverging palette
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 20)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 10),
legend.position = "right", # Move legend to the right side of the plot
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
plot.margin = margin(20, 20, 30, 20) # Adjust margins for better spacing
)
# Expand 'listed_in' column into multiple rows
categories <- netflix_data %>%
select(listed_in) %>%
separate_rows(listed_in, sep = ", ") %>%
group_by(listed_in) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
ggplot(categories[1:10, ], aes(x = reorder(listed_in, Count), y = Count, fill = listed_in)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Content Categories",
caption = "\"The International Movies\" and \"Dramas\" are the most prominent categories,\nreflecting a global and diverse audience.",
x = "Category",
y = "Count"
) +
scale_fill_brewer(palette = "RdBu") + # Use a diverging palette
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 20)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 10),
legend.position = "right", # Move legend to the right side of the plot
legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 10),
plot.margin = margin(20, 20, 30, 20) # Adjust margins for better spacing
)
# Expand 'listed_in' column into multiple rows
categories <- netflix_data %>%
select(listed_in) %>%
separate_rows(listed_in, sep = ", ") %>%
group_by(listed_in) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
ggplot(categories[1:10, ], aes(x = reorder(listed_in, Count), y = Count, fill = listed_in)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Content Categories",
caption = "\"The International Movies\" and \"Dramas\" are the most prominent categories,\nreflecting a global and diverse audience.",
x = "Category",
y = "Count"
) +
scale_fill_brewer(palette = "RdBu") + # Use a diverging palette
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 20)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 10),
legend.position = "right", # Move legend to the right side of the plot
legend.title = element_text(size = 9, face = "bold"),
legend.text = element_text(size = 10),
plot.margin = margin(20, 20, 30, 20) # Adjust margins for better spacing
)
# Calculate percentage for each content type
content_distribution <- netflix_data %>%
group_by(type) %>%
summarise(Count = n()) %>%
mutate(Percentage = Count / sum(Count) * 100) # Calculate percentage
# Bar plot with percentage labels
ggplot(content_distribution, aes(x = reorder(type, Count), y = Count, fill = type)) +
geom_segment(aes(x = type, xend = type, y = 0, yend = Count), size = 1.5, color = "grey") + # Lollipop stems
geom_point(size = 6, aes(color = type)) +   # Lollipop heads
geom_text(
aes(label = paste0(round(Percentage, 1), "%")),
vjust = 1.5,  # Position the text below the lollipop heads
hjust = -0.1, # Slightly offset horizontally for better readability
size = 5      # Adjust text size
) +
labs(
title = "Netflix Movies vs TV Shows",
subtitle = "This bar chart clearly shows that Netflix has more movies compared to TV shows.",
x = "Content Type",
y = "Count"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 40, 20), # Increased bottom margin to avoid cut-off
legend.position = "none"  # Remove legend for a cleaner look
)
# Group by release year and rating
heatmap_data <- netflix_data %>%
filter(!is.na(release_year), !is.na(rating)) %>%
group_by(release_year, rating) %>%
summarise(count = n(), .groups = "drop")
ggplot(heatmap_data, aes(x = release_year, y = rating, fill = count)) +
geom_tile() +
labs(
title = "Heat Map of Release Year vs. Rating",
x = "Release Year",
y = "Rating",
fill = "Count"
) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue")
# Group by release year and rating
heatmap_data <- netflix_data %>%
filter(!is.na(release_year), !is.na(rating)) %>%
group_by(release_year, rating) %>%
summarise(count = n(), .groups = "drop")
ggplot(heatmap_data, aes(x = release_year, y = rating, fill = count)) +
geom_tile() +
labs(
title = "Heat Map of Release Year vs. Rating",
subtitle = "The concentration of TV-MA and TV-14 ratings after 2000 indicates Netflix's growing adult-oriented content.",
x = "Release Year",
y = "Rating",
fill = "Count"
) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 30, 20)
)
# Calculate percentage for each content type
content_distribution <- netflix_data %>%
group_by(type) %>%
summarise(Count = n()) %>%
mutate(Percentage = Count / sum(Count) * 100) # Calculate percentage
# Bar plot with percentage labels
ggplot(content_distribution, aes(x = reorder(type, Count), y = Count, fill = type)) +
geom_segment(aes(x = type, xend = type, y = 0, yend = Count), size = 1.5, color = "grey") + # Lollipop stems
geom_point(size = 6, aes(color = type)) +   # Lollipop heads
geom_text(
aes(label = paste0(round(Percentage, 1), "%")),
vjust = 1.5,  # Position the text below the lollipop heads
hjust = -0.1, # Slightly offset horizontally for better readability
size = 5      # Adjust text size
) +
labs(
title = "Netflix Movies vs TV Shows",
subtitle = "This lollipop chart clearly shows that Netflix has more movies compared to TV shows.",
x = "Content Type",
y = "Count"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 40, 20), # Increased bottom margin to avoid cut-off
legend.position = "none"  # Remove legend for a cleaner look
)
# Scatter Plot: Release Year vs Duration Value with Regression Lines
scatter_plot_data <- netflix_data %>%
filter(!is.na(duration_value) & release_year >= 1920)  # Ensure valid values and remove outliers
ggplot(scatter_plot_data, aes(x = release_year, y = duration_value, color = type)) +
geom_point(alpha = 0.5) +  # Scatter points
geom_smooth(method = "lm", se = FALSE, aes(linetype = type), size = 1) +  # Add regression lines
labs(
title = "Scatter Plot of Release Year vs. Duration (with Regression Lines)",
x = "Release Year",
y = "Duration (Minutes)",
color = "Content Type",
linetype = "Content Type"  # Label for linetype legend
) +
theme_minimal()
# Scatter Plot: Release Year vs Duration Value with Regression Lines
scatter_plot_data <- netflix_data %>%
filter(!is.na(duration_value) & release_year >= 1920)  # Ensure valid values and remove outliers
ggplot(scatter_plot_data, aes(x = release_year, y = duration_value, color = type)) +
geom_point(alpha = 0.5) +  # Scatter points
geom_smooth(method = "lm", se = FALSE, aes(linetype = type), size = 1) +  # Add regression lines
labs(
title = "Scatter Plot of Release Year vs. Duration (with Regression Lines)",
subtitle = "The plot reveals that the duration of movies has stayed relatively consistent, while TV shows have shorter average durations.",
x = "Release Year",
y = "Duration (Minutes)",
color = "Content Type",
linetype = "Content Type"  # Label for linetype legend
) +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 30, 20)
)
# Scatter Plot: Release Year vs Duration Value with Regression Lines
scatter_plot_data <- netflix_data %>%
filter(!is.na(duration_value) & release_year >= 1920)  # Ensure valid values and remove outliers
ggplot(scatter_plot_data, aes(x = release_year, y = duration_value, color = type)) +
geom_point(alpha = 0.5) +  # Scatter points
geom_smooth(method = "lm", se = FALSE, aes(linetype = type), size = 1) +  # Add regression lines
labs(
title = "Scatter Plot of Release Year vs. Duration (with Regression Lines)",
subtitle = "The plot reveals that the duration of movies has stayed relatively consistent, while TV shows have shorter average durations.",
x = "Release Year",
y = "Duration (Minutes)",
color = "Content Type",
linetype = "Content Type"  # Label for linetype legend
) +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 9, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 30, 20)
)
# Scatter Plot: Release Year vs Duration Value with Regression Lines
scatter_plot_data <- netflix_data %>%
filter(!is.na(duration_value) & release_year >= 1920)  # Ensure valid values and remove outliers
ggplot(scatter_plot_data, aes(x = release_year, y = duration_value, color = type)) +
geom_point(alpha = 0.5) +  # Scatter points
geom_smooth(method = "lm", se = FALSE, aes(linetype = type), size = 1) +  # Add regression lines
labs(
title = "Scatter Plot of Release Year vs. Duration (with Regression Lines)",
subtitle = "The plot reveals that the duration of movies has stayed relatively consistent, while TV shows have shorter average durations.",
x = "Release Year",
y = "Duration (Minutes)",
color = "Content Type",
linetype = "Content Type"  # Label for linetype legend
) +
theme_minimal() +
theme(
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 8, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 30, 20)
)
# Group by release year and rating
heatmap_data <- netflix_data %>%
filter(!is.na(release_year), !is.na(rating)) %>%
group_by(release_year, rating) %>%
summarise(count = n(), .groups = "drop")
ggplot(heatmap_data, aes(x = release_year, y = rating, fill = count)) +
geom_tile() +
labs(
title = "Heat Map of Release Year vs. Rating",
subtitle = "The concentration of TV-MA and TV-14 ratings after 2000 indicates Netflix's growing adult-oriented content.",
x = "Release Year",
y = "Rating",
fill = "Count"
) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, face = "italic", hjust = 0.5, margin = margin(t = 5, b = 10)),
axis.text.y = element_text(size = 9),
axis.text.x = element_text(size = 9),
plot.margin = margin(20, 20, 30, 20)
)
# Ensure 'date_added' is in Date format
netflix_data <- netflix_data %>%
mutate(date_added = as.Date(date_added, format = "%m/%d/%Y"))
# Filter and sort data to get the most recently added titles, including genres
top_recent_titles <- netflix_data %>%
filter(!is.na(date_added)) %>%
arrange(desc(date_added)) %>% # No need to reconvert 'date_added' if already a Date
head(10) %>%
select(title, type, country, listed_in, date_added, release_year) # Include 'listed_in' for genres
# Render the table with kableExtra
top_recent_titles %>%
kbl(caption = "Top 10 Most Recent Movies/TV Shows Added (with Genres)") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Ensure 'date_added' is in Date format
netflix_data <- netflix_data %>%
mutate(date_added = as.Date(date_added, format = "%m/%d/%Y"))
# Filter and sort data to get the most recently added titles, including genres
top_recent_titles <- netflix_data %>%
filter(!is.na(date_added)) %>%
arrange(desc(date_added)) %>% # No need to reconvert 'date_added' if already a Date
head(10) %>%
select(title, type, country, listed_in, date_added, release_year) # Include 'listed_in' for genres
# Render the table with kableExtra
top_recent_titles %>%
kbl(
caption = "Top 10 Most Recent Movies/TV Shows Added (with Genres)\nThis table provides a snapshot of recently added content, highlighting global diversity."
) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Ensure 'date_added' is in Date format
netflix_data <- netflix_data %>%
mutate(date_added = as.Date(date_added, format = "%m/%d/%Y"))
# Filter and sort data to get the most recently added titles, including genres
top_recent_titles <- netflix_data %>%
filter(!is.na(date_added)) %>%
arrange(desc(date_added)) %>%
head(10) %>%
select(title, type, country, listed_in, date_added, release_year)
# Render the table with kableExtra
top_recent_titles %>%
kbl(
caption = "Top 10 Most Recent Movies/TV Shows Added (with Genres):\nThis table provides a snapshot of recently added content, highlighting global diversity."
) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Ensure 'date_added' is in Date format
netflix_data <- netflix_data %>%
mutate(date_added = as.Date(date_added, format = "%m/%d/%Y"))
# Filter and sort data to get the most recently added titles, including genres
top_recent_titles <- netflix_data %>%
filter(!is.na(date_added)) %>%
arrange(desc(date_added)) %>%
head(8) %>%
select(title, type, country, listed_in, date_added, release_year)
# Render the table with kableExtra
top_recent_titles %>%
kbl(
caption = "Top 10 Most Recent Movies/TV Shows Added (with Genres):\nThis table provides a snapshot of recently added content, highlighting global diversity."
) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Count content by rating
content_by_rating <- netflix_data %>%
group_by(rating) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count))
# Add a total row summarizing the total count
library(dplyr)
content_by_rating <- content_by_rating %>%
add_row(rating = "Total", Content_Count = sum(content_by_rating$Content_Count))
# Render the table
library(kableExtra)
content_by_rating %>%
kbl(
caption = "Distribution of Content by Rating (with Total Count):\nTV-MA and TV-14 ratings dominate Netflix’s library, which aligns with their focus on adult and young adult content."
) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Count content by rating
content_by_rating <- netflix_data %>%
group_by(rating) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count))
# Add a total row summarizing the total count
library(dplyr)
content_by_rating <- content_by_rating %>%
add_row(rating = "Total", Content_Count = sum(content_by_rating$Content_Count))
# Render the table
library(kableExtra)
content_by_rating %>%
kbl(
caption = "Distribution of Content by Rating (with Total Count):<br>TV-MA and TV-14 ratings dominate Netflix’s library, aligning with their focus on adult and young adult content."
) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Count content by rating
content_by_rating <- netflix_data %>%
group_by(rating) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count))
# Add a total row summarizing the total count
library(dplyr)
content_by_rating <- content_by_rating %>%
add_row(rating = "Total", Content_Count = sum(content_by_rating$Content_Count))
# Render the table
library(kableExtra)
content_by_rating %>%
kbl(
caption = "Distribution of Content by Rating (with Total Count):<br>TV-MA and TV-14 ratings dominate Netflix’s library, aligning with their focus on adult and young adult content."
) %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))
# Count content by rating
content_by_rating <- netflix_data %>%
group_by(rating) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count))
# Add a total row summarizing the total count
library(dplyr)
content_by_rating <- content_by_rating %>%
add_row(rating = "Total", Content_Count = sum(content_by_rating$Content_Count))
# Render the table
library(kableExtra)
content_by_rating %>%
kbl(
caption = "Distribution of Content by Rating (with Total Count): TV-MA and TV-14 ratings dominate Netflix’s library, aligning with their focus on adult and young adult content."
) %>%
kable_styling(
full_width = TRUE, # Ensure the table and caption span the entire width
position = "center", # Center-align the table and caption
bootstrap_options = c("striped", "hover", "condensed", "responsive")
)
# Count content by rating
content_by_rating <- netflix_data %>%
group_by(rating) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count))
# Add a total row summarizing the total count
library(dplyr)
content_by_rating <- content_by_rating %>%
add_row(rating = "Total", Content_Count = sum(content_by_rating$Content_Count))
# Render the table
library(kableExtra)
ontent_by_rating %>%
kbl(
caption = "Distribution of Content by Rating (with Total Count): TV-MA and TV-14 ratings dominate Netflix’s library, aligning with their focus on adult and young adult content."
) %>%
kable_styling(
full_width = TRUE, # Keep the table and caption spanning the entire width
position = "center", # Center-align the table and caption
bootstrap_options = c("striped", "hover", "condensed", "responsive")
) %>%
column_spec(1, width = "15%") %>% # Adjust the first column's width
column_spec(2, width = "15%")     # Adjust the second column's width
# Count content by rating
content_by_rating <- netflix_data %>%
group_by(rating) %>%
summarise(Content_Count = n()) %>%
arrange(desc(Content_Count))
# Add a total row summarizing the total count
library(dplyr)
content_by_rating <- content_by_rating %>%
add_row(rating = "Total", Content_Count = sum(content_by_rating$Content_Count))
# Render the table
library(kableExtra)
content_by_rating %>%
kbl(
caption = "Distribution of Content by Rating (with Total Count): TV-MA and TV-14 ratings dominate Netflix’s library, aligning with their focus on adult and young adult content."
) %>%
kable_styling(
full_width = TRUE, # Keep the table and caption spanning the entire width
position = "center", # Center-align the table and caption
bootstrap_options = c("striped", "hover", "condensed", "responsive")
) %>%
column_spec(1, width = "15%") %>% # Adjust the first column's width
column_spec(2, width = "15%")     # Adjust the second column's width
